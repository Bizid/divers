function expretion 
var g = function (){
	alert("G");
}


// Code goes here

'use strict';
// window
window.a = undefined;

var a = 5;


// f.[[Scope]] = window
function f() {
  // Lexical Environment
  // fCall0LE = { b: undefined,  inner: function() { alert(1); } };
  // fCall1LE = { b: undefined,  inner: function() { alert(1); } };
  // fCall1LE = { b: undefined,  inner: function() { alert(1); } };
  
  
  fCall0LE.b = 10;
  
  function inner() {
    alert(1);
  }
}


f(); // fCall0LE = { b: undefined,  inner: function() { alert(1); } };
f(); // fCall1LE = { b: undefined,  inner: function() { alert(1); } };
f(); // fCall1LE = { b: undefined,  inner: function() { alert(1); } };




'use strict';

var value = 1;

function f() {
  if (value) {
    value = true;
  } else {
    var value = false;
  }

  alert( value );  //false
}

f();


// Code goes here

'use strict';
window.currentCount = 1;

var currentCount = 1; // window.currentCount = 1;

/// makeCounter.[[Scope]] = window;
function makeCounter() { // window.makeCounter
  // LE0 = {};
  // LE1 = {};
  
  return function() {
    return currentCount++;
  };
}

var counter = makeCounter(); // counter = function() { return window.currentCount++; };
var counter2 = makeCounter(); // counter2 = function() { return window.currentCount++; };

alert( counter() ); // ? 1 window.currentCount === 2
alert( counter() ); // ? 2 window.currentCount === 3

alert( counter2() ); // ? 3 window.currentCount === 4
alert( counter2() ); // ? 4 window.currentCount === 



Замыкания, область видимости

Глобальный объект
Замыкания, функции изнутри
[[Scope]] для new Function
Локальные переменные для объекта
Модули через замыкания
Управление памятью в JavaScript
Устаревшая конструкция «with»
Армия функций 5


